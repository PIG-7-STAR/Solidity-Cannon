/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessError",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessError__factory>;
    getContractFactory(
      name: "AddressError",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressError__factory>;
    getContractFactory(
      name: "ChangeError",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChangeError__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IUUPSImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUUPSImplementation__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "AbstractProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractProxy__factory>;
    getContractFactory(
      name: "UUPSImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSImplementation__factory>;
    getContractFactory(
      name: "UUPSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSProxy__factory>;
    getContractFactory(
      name: "CannonRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CannonRegistry__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;

    getContractAt(
      name: "AccessError",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessError>;
    getContractAt(
      name: "AddressError",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressError>;
    getContractAt(
      name: "ChangeError",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChangeError>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IUUPSImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUUPSImplementation>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "AbstractProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractProxy>;
    getContractAt(
      name: "UUPSImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSImplementation>;
    getContractAt(
      name: "UUPSProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSProxy>;
    getContractAt(
      name: "CannonRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CannonRegistry>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
