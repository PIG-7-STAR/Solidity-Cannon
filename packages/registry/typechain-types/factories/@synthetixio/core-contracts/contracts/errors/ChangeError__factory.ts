/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../common';
import type {
  ChangeError,
  ChangeErrorInterface,
} from '../../../../../@synthetixio/core-contracts/contracts/errors/ChangeError';

const _abi = [
  {
    inputs: [],
    name: 'NoChange',
    type: 'error',
  },
];

const _bytecode =
  '0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bad0283a629f13adb2fe77a34eb830b2804e2b8de2e946da5b0c1f28aae0c10a64736f6c634300080b0033';

type ChangeErrorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChangeErrorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChangeError__factory extends ContractFactory {
  constructor(...args: ChangeErrorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ChangeError> {
    return super.deploy(overrides || {}) as Promise<ChangeError>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ChangeError {
    return super.attach(address) as ChangeError;
  }
  override connect(signer: Signer): ChangeError__factory {
    return super.connect(signer) as ChangeError__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChangeErrorInterface {
    return new utils.Interface(_abi) as ChangeErrorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChangeError {
    return new Contract(address, _abi, signerOrProvider) as ChangeError;
  }
}
