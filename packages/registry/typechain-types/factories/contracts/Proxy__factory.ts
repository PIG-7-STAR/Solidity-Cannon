/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Proxy, ProxyInterface } from "../../contracts/Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "firstImplementation",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contr",
        type: "address",
      },
    ],
    name: "NotAContract",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161036638038061036683398181016040528101906100329190610218565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561009a576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6100ad8161017760201b6100471760201c565b6100ee57806040517f8a8b41ec0000000000000000000000000000000000000000000000000000000081526004016100e59190610254565b60405180910390fd5b806100fd61018a60201b60201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101717f36db15d5e70424a2ebf16d5aebd48da0e71ef72933d4917c7e5db8600dfac25e60001b6101b260201b60201c565b5061026f565b600080823b905060008111915050919050565b60007f32402780481dd8149e50baad867f01da72e2f7d02639a6fe378dbd80b6bb446e905090565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101e5826101ba565b9050919050565b6101f5816101da565b811461020057600080fd5b50565b600081519050610212816101ec565b92915050565b60006020828403121561022e5761022d6101b5565b5b600061023c84828501610203565b91505092915050565b61024e816101da565b82525050565b60006020820190506102696000830184610245565b92915050565b60e98061027d6000396000f3fe608060405236601057600e6018565b005b60166018565b005b60006020605a565b90503660008037600080366000845af43d6000803e80600081146042573d6000f35b3d6000fd5b600080823b905060008111915050919050565b60006062608b565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f32402780481dd8149e50baad867f01da72e2f7d02639a6fe378dbd80b6bb446e90509056fea2646970667358221220358b6280328ae59e52e20acbc4a7a185bcb807d9f7947e80abc5eeff8081994b64736f6c634300080b0033";

type ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proxy__factory extends ContractFactory {
  constructor(...args: ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    firstImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Proxy> {
    return super.deploy(firstImplementation, overrides || {}) as Promise<Proxy>;
  }
  override getDeployTransaction(
    firstImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(firstImplementation, overrides || {});
  }
  override attach(address: string): Proxy {
    return super.attach(address) as Proxy;
  }
  override connect(signer: Signer): Proxy__factory {
    return super.connect(signer) as Proxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterface {
    return new utils.Interface(_abi) as ProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Proxy {
    return new Contract(address, _abi, signerOrProvider) as Proxy;
  }
}
