/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OwnableStorage,
  OwnableStorageInterface,
} from "../../../contracts/misc/OwnableStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
];

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122096cec4897e5d0cdd6c0fdfabc811108c927e19e31251d5c8a00fd39dc33555cf64736f6c634300080b0033";

type OwnableStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnableStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnableStorage__factory extends ContractFactory {
  constructor(...args: OwnableStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnableStorage> {
    return super.deploy(overrides || {}) as Promise<OwnableStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OwnableStorage {
    return super.attach(address) as OwnableStorage;
  }
  override connect(signer: Signer): OwnableStorage__factory {
    return super.connect(signer) as OwnableStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnableStorageInterface {
    return new utils.Interface(_abi) as OwnableStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnableStorage {
    return new Contract(address, _abi, signerOrProvider) as OwnableStorage;
  }
}
