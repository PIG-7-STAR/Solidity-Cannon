// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from '@graphprotocol/graph-ts';

export class Package extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));

    this.set('name', Value.fromString(''));
    this.set('description', Value.fromString(''));
    this.set('version', Value.fromString(''));
    this.set('url', Value.fromString(''));
    this.set('added', Value.fromBigInt(BigInt.zero()));
    this.set('publisher', Value.fromString(''));
    this.set('readme', Value.fromString(''));
    this.set('cannonfile', Value.fromString(''));
  }

  save(): void {
    const id = this.get('id');
    assert(id != null, 'Cannot save Package entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        'Cannot save Package entity with non-string ID. ' +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set('Package', id.toString(), this);
    }
  }

  static load(id: string): Package | null {
    return changetype<Package | null>(store.get('Package', id));
  }

  get id(): string {
    const value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get name(): string {
    const value = this.get('name');
    return value!.toString();
  }

  set name(value: string) {
    this.set('name', Value.fromString(value));
  }

  get description(): string {
    const value = this.get('description');
    return value!.toString();
  }

  set description(value: string) {
    this.set('description', Value.fromString(value));
  }

  get version(): string {
    const value = this.get('version');
    return value!.toString();
  }

  set version(value: string) {
    this.set('version', Value.fromString(value));
  }

  get url(): string {
    const value = this.get('url');
    return value!.toString();
  }

  set url(value: string) {
    this.set('url', Value.fromString(value));
  }

  get added(): BigInt {
    const value = this.get('added');
    return value!.toBigInt();
  }

  set added(value: BigInt) {
    this.set('added', Value.fromBigInt(value));
  }

  get publisher(): string {
    const value = this.get('publisher');
    return value!.toString();
  }

  set publisher(value: string) {
    this.set('publisher', Value.fromString(value));
  }

  get readme(): string {
    const value = this.get('readme');
    return value!.toString();
  }

  set readme(value: string) {
    this.set('readme', Value.fromString(value));
  }

  get cannonfile(): string {
    const value = this.get('cannonfile');
    return value!.toString();
  }

  set cannonfile(value: string) {
    this.set('cannonfile', Value.fromString(value));
  }

  get tags(): Array<string> | null {
    const value = this.get('tags');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tags(value: Array<string> | null) {
    if (!value) {
      this.unset('tags');
    } else {
      this.set('tags', Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Tag extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));

    this.set('count', Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    const id = this.get('id');
    assert(id != null, 'Cannot save Tag entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        'Cannot save Tag entity with non-string ID. ' +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set('Tag', id.toString(), this);
    }
  }

  static load(id: string): Tag | null {
    return changetype<Tag | null>(store.get('Tag', id));
  }

  get id(): string {
    const value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get count(): BigInt {
    const value = this.get('count');
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set('count', Value.fromBigInt(value));
  }

  get packages(): Array<string> | null {
    const value = this.get('packages');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set packages(value: Array<string> | null) {
    if (!value) {
      this.unset('packages');
    } else {
      this.set('packages', Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class PackageTag extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));

    this.set('cannon_package', Value.fromString(''));
    this.set('tag', Value.fromString(''));
  }

  save(): void {
    const id = this.get('id');
    assert(id != null, 'Cannot save PackageTag entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        'Cannot save PackageTag entity with non-string ID. ' +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set('PackageTag', id.toString(), this);
    }
  }

  static load(id: string): PackageTag | null {
    return changetype<PackageTag | null>(store.get('PackageTag', id));
  }

  get id(): string {
    const value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get cannon_package(): string {
    const value = this.get('cannon_package');
    return value!.toString();
  }

  set cannon_package(value: string) {
    this.set('cannon_package', Value.fromString(value));
  }

  get tag(): string {
    const value = this.get('tag');
    return value!.toString();
  }

  set tag(value: string) {
    this.set('tag', Value.fromString(value));
  }
}
